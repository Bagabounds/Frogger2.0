16 cols * 15 rows

absolute dimensions = 512 * 480 px
cellSize = 32 px
drawingBoard = 16 px

velocidade do thread deve ser a unidade de tempo mínima.
Assim, em vez de a cada pausa de thread dar-se dois métodos de movimento,
fazendo com que a imagem salte de repente duas casas e disturbe o game play,
assim, os objectos mais rápidos mexem-se a cada thread pause, e os mais lentos
mexem-se a cada 2 thread pauses. O player mexe-se livremente.
Este é o princípio dos jogos Game & Watch, pois não conseguem ter processamento
veloz, mas mantém a sua gameplay

Objectivos:
por quadro de pontuações
por catarina a passar na segunda zona segura com um balão de fala a dizer summarizer.
apanhar garrafas de vinho para pontos na primeira estrada com ratos.
objectivo e ir aos macs e trazer o summarizer de volta para a zona inicial.

Como definir speeds diferentes:

	A cada thread.sleep, é acrescentado 1 a um contador. Os objectos que
	são mais lentos só se movem quando o contador é par. Isto garante
	que todos os objectos mais velozes movem em cada thread.sleep,
	e os mais lentos apenas se movem de 2 em 2, ou em múltiplos de 3,
	etc…
	Se necessário, reiniciar o contador para não ultrapassar limites
	do integer. Caso isto aconteça, o contador deve ser reiniciado num
	valor que seja múltiplo comum a todos os objectos e as suas velocidades.


 /*TODO preloading. load all images in an array 
    the size of the array is the number of objects that need a sprite. the preload is made on the creation of the field.*/


De vez em quando acontece isto:
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)
	at java.util.ArrayList$Itr.next(ArrayList.java:851)
	at org.academiadecodigo.simplegraphics.graphics.Canvas$CanvasComponent.getPreferredSize(Unknown Source)
	at org.academiadecodigo.simplegraphics.graphics.Canvas.repaint(Unknown Source)
	at org.academiadecodigo.simplegraphics.pictures.Picture.load(Unknown Source)
	at org.academiadecodigo.simplegraphics.pictures.Picture.<init>(Unknown Source)
	at org.academiadecodigo.frogger.display.FieldPosition.setPos(FieldPosition.java:47)
	at org.academiadecodigo.frogger.display.FieldPosition.moveLeft(FieldPosition.java:86)
	at org.academiadecodigo.frogger.display.FieldPosition.moveInDirection(FieldPosition.java:61)
	at org.academiadecodigo.frogger.gameobjects.MoveableGameObject.move(MoveableGameObject.java:26)
	at org.academiadecodigo.frogger.gameobjects.Rat.move(Rat.java:43)
	at org.academiadecodigo.frogger.game.Game.moveAll(Game.java:48)
	at org.academiadecodigo.frogger.game.Game.start(Game.java:40)
	at org.academiadecodigo.frogger.game.Main.main(Main.java:12)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)